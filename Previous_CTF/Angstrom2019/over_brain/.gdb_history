Gadget address: 0x400b30
Checking what the gadgets are:
r2 write4
pd 16 @ 0x400b30
screenshot 6
Very nice. This gadget will help to decode my target string.
Now to get data into the registers used by the gadget above. Time to look for a pop/pop/ret gadget.
Searching for pop/pop/ret:
ropper –file badchars –search “pop r14; pop r15; ret;”
screenshot 7
pop/pop/ret address: 0x400b40
Awesome. So, we have the decoding part down. Now to find gadgets to write to memory.
As in the write4 challenge, these will be mov/ret and pop/pop/ret.
Searching for mov/ret and pop/pop/ret:
ROPgadget –binary badchars –only “mov|pop|ret”
screenshot 8
Cool. Three birds with one stone.
mov/ret: 0x400b34
pop/pop/ret: 0x400b3b
pop/ret: 0x400b39
This last pop/ret is the pop rdi; ret that we need for system().
We can find the system() PLT address with pwntools.
We now have all we need to write the exploit script. We will be reusing the write4 helper function and XOR’ing the target string.
Strategy:
1) Pop registers r13 and r12 to hold the .data address and the XOR’ed target string respectively.
2) Write (mov) the string (r12) to the .data section (r13).
3) Pop the XOR’ed string and decode (XOR) it.
3) Pop rdi (first parameter to system) to hold the location of the target string in the .data section.
4) Call system
Important Addresses:
.data address: 0x601070
xor/ret address: 0x400b30
pop/pop/ret address (XOR): 0x400b40
mov/ret: 0x400b34
pop/pop/ret: 0x400b3b
pop/ret: 0x400b39
System address: TBD
Building the exploit script:
gvim no_badchars.py
screenshot 10screenshot 11screenshot 12screenshot 13
Note there is a switch in the order of the target string and target address due to the gadgets being used.
Launching the exploit:
python no_badchars.py
screenshot 9
ropasaurusrex (PlaidCTF 2013)
INSTRUCTIONS
PlaidCTF ROP challenge.
SOLUTION
Checking the binary’s security mechanisms:
checksec ropasaurusrex
screenshot 25
Analyzing the binary using Binary Ninja:
binaryninja ropasaurusrex
Go to function sub_80483f4
Change the values to signed decimal where appropriate
screenshot 5
Options -> Medium Level IL
screenshot 4
There is a clear buffer overflow vulnerability. We are going to test the theory.
Testing for a buffer overflow:
gdb -q ./ropasaurusrex
pattc 150
Copy the output
r
Paste the output
screenshot
Pattern: AmAA
Finding the offset:
patto AmAA
screenshot 3
The payload will require a 140-byte buffer.
Starting the binary as a network service:
echo ‘while true; do nc -vv -l -p 4444 -e ./ropasaurusrex; done’ > start.sh
bash start.sh
Creating a skeleton network exploit script:
gvim ropakill.py
screenshot 6
Testing the script:
python ropakill.py
screenshot 8
Network-side:
screenshot 7
Verifying the payload:
gdb -q ./ropasaurusrex core
screenshot 9
Success.
Since this is a ROP challenge, or return-to-libc, my goal is to run system, which can already be found via the binary, along with a string such as /bin/sh.
The premise behind ROP is that we can manipulate the program flow by utilizing available functions and returns. Hence, jumping from return to return as is convenient for crafting my payload.
To get the “/bin/sh” string in memory, we have to:
1) First, find some memory that we can write to
2) Second, find a function that can write to it
Finding writable memory:
readelf -l ropasaurusrex
screenshot 10
The -l flag displays the program headers, along with section to segment mapping, which determine the actual permissions. Note that .dynamic has the RW flags, which stand for Read Write.
The .dynamic section holds information for dynamic linking, which we don’t care for here. So, we’re going to use 0x08049530 to write the command string (‘/bin/sh’) to.
Now we need to find a function that can do the writing to the chosen address. To this end we can either use a function available within the executable or a function in one of the libraries being used. The upside to using one of the executable’s own functions is that the addressing will be consistent across systems, while the libraries option will vary from system to system.
Finding a function to write with:
objdump -R ropasaurusrex
screenshot 11
The -R flag dumps relocated bytes.
The executable gives us both the write() and read() functions. read() will read data from the socket, and write it to memory.
ssize_t read(int fd, void *buf, size_t count);
ssize_t write(int fd, const void *buf, size_t count);
Since the binary is not ASLR’d, we can rely on the offsets above.
We can write with read() due to how it is called. See below.
screenshot 18
It is called as an indirect Jump. This means that if we can overwrite the value at 0x804961C, and the call to read() still jumps to this address, then we can really jump anywhere we want; We can jump to anywhere we overwrite the address with.
Finding the values of read() and system():
x/x system
x/x 0x804961C
screenshot 19
System: 0x8b0cec83
Read: 0xf7e947a0
We want the stack to look as follows:
+———————-+ <- start of read()’s stack frame
| size_t count | <- count; strlen(“/bin/sh”)
+———————-+
| void *buf | <- writable memory; 0x08049530
+———————-+
| int fd | <- ‘stdin’ (0)
+———————-+
| [return address] | <- where ‘read’ will return
+———————-+
| … | <- saved frame pointer; doesn’t matter
+———————-+
| … | <- read() local variables; doesn’t matter
+———————-+
Updating the exploit script:
screenshot 14
Testing the exploit script:
python ropakill.py ‘/bin/sh’
gdb -q ropasaurusrex core
screenshot 13
Verifying we could write the string to memory:
x/s 0x08049530
screenshot 12
Now that we verified I can write to memory, we have to call system and point it at the address we wrote to.
Verifying linked libraries:
ldd ./ropasaurusrex
screenshot 15
As expected, libc is used.
Verifying system:
nm -D /lib/i386-linux-gnu/libc.so.6 | grep system
screenshot 16
System only takes one argument, and hence its stack frame is straightforward.
+———————-+ <- start of system()’s stack frame
| void *arg | <- writable memory, 0x08049530
+———————-+
| [return address] | <- where ‘system’ will return
+———————-+
| … | <- system() local variables; doesn’t matter
+———————-+
Stacking the system() frame on top of the read() frame looks as follows:
+———————-+ <- start of system()’s stack frame
| void *arg | <- writable memory, 0x08049530
+———————-+
| [return address] | <- where system() will return
+———————-+
| … |
+———————-+ <- start of read()’s stack frame
| size_t count | <- count; strlen(“/bin/sh”)
+———————-+
| void *buf | <- writable memory; 0x08049530
+———————-+
| int fd | <- ‘stdin’ (0)
+———————-+
| [return address] | <- where read() will return; system’s address
+———————-+
| … |
+———————-+
| … |
+———————-+
Since read() has three arguments, we need to pop all three off the stack and return to system’s address. That means we need to find a pop/pop/pop/ret gadget in order to have the stack pointer point to the bottom of the system frame.
Finding the gadgets:
ROPgadget –binary ropasaurusrex –only “pop|ret”
screenshot 17
Address 0x080484b6 will work.
The stack frames will now look like this:
+———————-+ <- start of system()’s stack frame [8]
| void *arg | <- writable memory, 0x08049530
+———————-+
| [return address] | <- where system() will return; random
+———————-+
| … |
+———————-+ <- gadget frame [7]
| [read address] | <- read() address; jumps to system
+———————-+
| … |
+———————-+ <- start of second read()’s stack frame [6]
| size_t count | <- count
+———————-+
| void *buf | <- pointer to read() to overwrite
+———————-+
| int fd | <- ‘stdin’ (0)
+———————-+
| [gadget address] | <- address of pop/pop/pop/ret
+———————-+
| … |
+———————-+ <- gadget stack frame [4]
| [read address] | <- address of read()
+———————-+
| … |
+———————-+ <- start of write()’s stack frame [3]
| size_t count | <- count
+———————-+
| void *buf | <- pointer to read()
+———————-+
| int fd | <- ‘stdout’ (1)
+———————-+
| [gadget address] | <- address of pop/pop/pop/ret
+———————-+
| … |
+———————-+ <- start of gadget stack frame [2]
| [write address] | <- address of write()
+———————-+
| … |
+———————-+ <- start of read()’s stack frame [1]
| size_t count | <- count; strlen(cmd)
+———————-+
| void *buf | <- writable memory; 0x08049530
+———————-+
| int fd | <- ‘stdin’ (0)
+———————-+
| [gadget address] | <- address of pop/pop/pop/ret
+———————-+
| … |
+———————-+
With this information we can now proceed to write the final exploit script.
The workflow will look as below:
1) Copy a command to memory by using read()
2) Use the gadget (pop/pop/pop/ret) to clean read()
3) Use write() to get the address of read() from memory; its real address
4) Use the gadget (pop/pop/pop/ret) to clean write()
5) Get the system address, by calculating read() – system()
6) Overwrite the call to read() in the PLT with system()
7) Use the gadget (pop/pop/pop/ret) to return to the overwritten read(), now system
8) Call read() / system()
Updating the exploit script:
screenshot 20screenshot 21screenshot 22screenshot 23
We chose to not use the helper function written for ROP Emporium in order to show how stack frames would look.
Performing the exploit:
python ropakill.py
screenshot 2
r0pbaby (Defcon Qualifiers 2015)
INSTRUCTIONS
Defcon Qualifiers ROP challenge.
SOLUTION
Checking the binary’s security mechanisms:
checksec r0pbaby
screenshot
We are dealing with a 64-bit binary.
Starting the program:
gdb -q ./r0pbaby
Creating a pattern:
pattern_creqqwe
